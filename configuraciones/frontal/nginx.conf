user                    nginx;   # Usuario con el que se crean los subprocesos . P ej. Workers
worker_processes        2;       # Numero de workers. Depende de las CPUs disponibles
error_log  /var/log/nginx/error.log warn;   # Ubicación fichero de log de errores . Con el nivel de severidad
pid        /var/run/nginx.pid;              # Ubicación fichero que contiene el PID del master de nginx

events {
    worker_connections  1024;              # Número de hilos /Conexiones simultaneas atendibles por UN worker
}

## Parte de la configuración que alude al protocolo http



stream {

    upstream misbasesmaria {
        least_conn;
        server ip-172-31-15-80:3307 weight=10 max_fails=5 fail_timeout=20s;
    }

    server {
        listen  83;
        proxy_pass misbasesmaria;
    }
}


http {
    include       /etc/nginx/mime.types;    # Tipos de archivos (asociados a extensiones) que nginx auto-reconoce
    default_type  application/octet-stream; # Si no encuentra un tipo de datos en el fichero anterior, pon este. BINARIOS
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
                # LISTADO DE VARIABLES EN NGINX: http://nginx.org/en/docs/varindex.html
                    # En este caso, al formato, le denominamos "main"... es un nombre con el que referirnos a él.

    access_log  /var/log/nginx/access.log  main;    # Ubicacion de un archivo donde se genere un log de accesos / Peticiones HTTP
    sendfile        on;                             # Cómo nginx lee los ficheros a la hora de mandarlos al cliente.
                                        # Con sendfile off => POR DEFECTO
                                                # Nginx lee los ficheros a un buffer en RAM y desde ese buffer se van mandando al cliente
                                        # Con sendfile on => NO ES POR DEFECTO
                                                # Nginx lee los ficheros y según va leyendo lo va mandando al cliente, sin cargarlo a un buffer propio en RAM
                                                    # ESTO VA GUAY EN LINUX. En otros SO..... bufffff
    #tcp_nopush     on;
    keepalive_timeout  65;              # Tiempo que se va a mantener abierta la conexión sin notificaciones del cliente
    #gzip  on;
    limit_req_zone $binary_remote_addr zone=mi-zona:10m rate=5r/s; # Cuantas peticiones hace un cliente en un periodo de tiempo
  #  limit_conn_zone $binary_remote_addr zone=mi-zona2:10m ;   #cuantas conexiones se abren desde una IP simultaneamente


    # CACHE EN NGINX
    proxy_cache_path /tmp keys_zone=micache:100m;
    # Esto sería un VIRTUAL HOST
    server {
        listen  80;                 
        server_name  localhost;     # El DNS a través del que se pueden recibir las peticiones adicionalmente
        root /frontal;              # La ruta (lo que hay detrás del puerto en la URL) buscala en una carpeta de mi Sistema de Archivos
            # Hay algún contenido estático que yo vaya a servir en ALGUN escenario RARO?
                # Que pasa si hay un error
            
        # Configurar una ruta para acceder al sitio1 (este está en otro nginx)
        location / {
#            limit_req zone=mi-zona;
            proxy_cache micache;
            proxy_cache_valid any 10m;
            proxy_cache_background_update on;
            proxy_cache_methods GET;
            
            proxy_pass http://ip-172-31-15-80:8081;
        }
    }
    
    upstream app1 {
        least_conn;
        server ip-172-31-15-80:8082 max_fails=3 fail_timeout=60s;# slow_start=30s;
        server ip-172-31-15-80:8083 max_fails=3 fail_timeout=60s;
    }

    # Configurar un balanceador de carga para la app1 (que la tengo en 2 servidores por detrás independientes)
    server {
        listen  81;                 
        server_name  localhost;     # El DNS a través del que se pueden recibir las peticiones adicionalmente
        root /frontal;              # La ruta (lo que hay detrás del puerto en la URL) buscala en una carpeta de mi Sistema de Archivos
            # Hay algún contenido estático que yo vaya a servir en ALGUN escenario RARO?
                # Que pasa si hay un error
            
        # Configurar una ruta para acceder al app1 (este está en otro nginx)
        location / {
            proxy_pass http://app1;
        }
    }
    ## Server para nextcloud
    server {
        listen  8090;                 
        server_name  ec2-34-247-190-54.eu-west-1.compute.amazonaws.com default localhost;     # El DNS a través del que se pueden recibir las peticiones adicionalmente
        root /frontal;
        location / {

            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_set_header X-Scheme $scheme;
            proxy_set_header X-Forwarded-Proto $scheme;

            
            proxy_pass http://172.31.15.80:8089;
            
        }
    }
    
    # Creo una zona en la RAM, llamada mi-zona donde nginx va a apuntar cuantas peticiones va haciendo cada usuario
    # Identificando cuando un usuario hace más de 60 peticiones por minuto
#    limit_req_zone $binary_remote_addr zone=mi-zona:10m rate=60r/m; # Cuantas peticiones hace un cliente en un periodo de tiempo
#    limit_conn_zone $binary_remote_addr zone=mi-zona2:10m ;   #cuantas conexiones se abren desde una IP simultaneamente
    
#    server {
#        listen 80;
#        server_name guardiacivil.es informacion.guardiacivil.es interno.guardiacivil.es;
#        limit_req zone=mi-zona;  # Aplicamos la restriccion
#        limit_conn zone=mi-zona2 5;  # Aplicamos la restriccion
#        # Cuanto tiempo tengo abierto un request para un cliente
#        client_header_timeout 5s;        
#        client_body_timeout 30s;        
        # Tamaño de la petición
#        client_max_body_size 3M;
#        
#        allow 10.20.30.0/24;
#        deny all;
        
#        location / {
#            return 301 https://$host$request_uri;
#            limit_req zone=mi-zona;  # Aplicamos la restriccion
#            limit_conn zone=mi-zona2 5;  # Aplicamos la restriccion
#        }
#    }

#    server {
#        listen 443 ssl;
#        server_name guardiacivil.es;
        # Contiene la ruta al certificado (y por ende a mi clave publica)
#        ssl_certificate         RUTA_AL_CERTIFICADO    *.pem; 
        # Contiene la ruta a la clave privada
#        ssl_certificate_key     RUTA_AL_CERTIFICADO    *.pem; 
#        ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
#        ssl_ciphers             ;
        
#    }
}
