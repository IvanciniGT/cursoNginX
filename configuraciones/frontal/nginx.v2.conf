user                    nginx;   # Usuario con el que se crean los subprocesos . P ej. Workers
worker_processes        2;       # Numero de workers. Depende de las CPUs disponibles
error_log  /var/log/nginx/error.log warn;   # Ubicación fichero de log de errores . Con el nivel de severidad
pid        /var/run/nginx.pid;              # Ubicación fichero que contiene el PID del master de nginx

events {
    worker_connections  1024;              # Número de hilos /Conexiones simultaneas atendibles por UN worker
}

## Parte de la configuración que alude al protocolo http

http {
    include       /etc/nginx/mime.types;    # Tipos de archivos (asociados a extensiones) que nginx auto-reconoce
    default_type  application/octet-stream; # Si no encuentra un tipo de datos en el fichero anterior, pon este. BINARIOS
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
                # LISTADO DE VARIABLES EN NGINX: http://nginx.org/en/docs/varindex.html
                    # En este caso, al formato, le denominamos "main"... es un nombre con el que referirnos a él.

    access_log  /var/log/nginx/access.log  main;    # Ubicacion de un archivo donde se genere un log de accesos / Peticiones HTTP
    sendfile        on;                             # Cómo nginx lee los ficheros a la hora de mandarlos al cliente.
                                        # Con sendfile off => POR DEFECTO
                                                # Nginx lee los ficheros a un buffer en RAM y desde ese buffer se van mandando al cliente
                                        # Con sendfile on => NO ES POR DEFECTO
                                                # Nginx lee los ficheros y según va leyendo lo va mandando al cliente, sin cargarlo a un buffer propio en RAM
                                                    # ESTO VA GUAY EN LINUX. En otros SO..... bufffff
    #tcp_nopush     on;
    keepalive_timeout  65;              # Tiempo que se va a mantener abierta la conexión sin notificaciones del cliente
    #gzip  on;
    upstream app1 {
        least_conn;
        server ip-172-31-15-80:8082;
        server ip-172-31-15-80:8083;
    }

    # Esto sería un VIRTUAL HOST
    server {
        listen  80;                 
        server_name  localhost;     # El DNS a través del que se pueden recibir las peticiones adicionalmente
        root /frontal;              # La ruta (lo que hay detrás del puerto en la URL) buscala en una carpeta de mi Sistema de Archivos
            # Hay algún contenido estático que yo vaya a servir en ALGUN escenario RARO?
                # Que pasa si hay un error
            
        # Configurar una ruta para acceder al sitio1 (este está en otro nginx)
        location = /sitio1 {
            return 302 /sitio1/;
        }

        location /sitio1/ {
#            rewrite      /sitio1/carpeta/pagina.html     /carpeta/pagina.html      break;
#            rewrite      /sitio1/imagenes/imagen.jpg     /imagenes/imagen.jpg      break;
#            rewrite      ^/sitio1(/.*)$                  $1                        break;

            proxy_pass http://ip-172-31-15-80:8081/; # OJO CON LA BARRA... ME ESTA HACIENDO UN REWRITE. EL DE ARRIBA
        }
        # Configurar una ruta para acceder al app1 (este está en otro nginx)
        location /app1/ {
            proxy_pass http://app1;
        }
    }
    
}                       # RUTA (location)
# www.guardiacivil.es     /sitio1 >>>>> sitio1
# www.guardiacivil.es     /app1 >>>>> APP1 (balanceo)
